# Generated by Django 4.1.4 on 2023-01-30 03:26

import datetime
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advantage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('photo_path', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('date_delete', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('phone', models.CharField(max_length=255, verbose_name='Телефон')),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('date_complete', models.DateTimeField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(1, 'Refused'), (2, 'Waiting Call'), (3, 'Completed')], default=2)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('phone', models.CharField(max_length=255, verbose_name='Телефон')),
                ('mail', models.CharField(max_length=255, verbose_name='Почта')),
                ('date_of_birth', models.DateTimeField(verbose_name='Дата рождения')),
                ('photo_path', models.ImageField(blank=True, null=True, upload_to='photos/', verbose_name='Фото')),
                ('comment', models.TextField(blank=True, null=True)),
                ('passwd', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Клиенты',
                'verbose_name_plural': 'Клиенты',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('photo_path', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('date_delete', models.DateTimeField(blank=True, null=True)),
                ('is_visible', models.BooleanField(default=True)),
                ('is_fixed', models.BooleanField()),
                ('discount_amount_absolute', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount_amount_percent', models.IntegerField(blank=True, null=True)),
                ('date_start', models.DateTimeField(blank=True, null=True)),
                ('date_end', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DiscountService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.discount')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('date_of_birth', models.DateTimeField()),
                ('phone', models.CharField(max_length=255)),
                ('mail', models.CharField(max_length=255)),
                ('photo_path', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('is_hourly', models.BooleanField(blank=True, null=True)),
                ('sport_category', models.IntegerField(choices=[(1, 'Master Of Sports Of International Class'), (2, 'Master Of Sports'), (3, 'Candidate For Master Of Sports'), (4, 'Without A Sports Category')])),
                ('date_delete', models.DateTimeField(blank=True, null=True)),
                ('text_for_visit', models.TextField(blank=True, null=True)),
                ('passwd', models.CharField(max_length=255)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fitness.employee')),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('is_available', models.BooleanField(default=True)),
                ('date_delete', models.DateTimeField(blank=True, null=True)),
                ('is_group', models.BooleanField(blank=True, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('sport_services', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Towel'), (2, 'Water Bottle'), (3, 'Sauna'), (4, 'Personal Locker'), (5, 'Disposable Slippers')]), blank=True, null=True, size=None)),
                ('description', models.TextField()),
                ('group_status_changing', models.BooleanField(blank=True, default=True, null=True)),
                ('max_clients', models.IntegerField(blank=True, null=True)),
                ('start_work_weekends', models.TimeField(blank=True, null=True)),
                ('end_work_weekends', models.TimeField(blank=True, null=True)),
                ('start_work_holidays', models.TimeField(blank=True, null=True)),
                ('end_work_holidays', models.TimeField(blank=True, null=True)),
                ('advantages', models.ManyToManyField(blank=True, null=True, to='fitness.advantage')),
                ('discounts', models.ManyToManyField(blank=True, null=True, through='fitness.DiscountService', to='fitness.discount')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fitness.service')),
            ],
        ),
        migrations.CreateModel(
            name='ServicePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo_path', models.ImageField(upload_to='photos/')),
                ('date_delete', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('duration', models.IntegerField()),
                ('description', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('date_delete', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_individual', models.BooleanField(blank=True, null=True)),
                ('date_cancel', models.DateTimeField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fitness.client')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fitness.employee')),
            ],
        ),
        migrations.CreateModel(
            name='VisitService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.service')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.visit')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceTimetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.service')),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='photos',
            field=models.ManyToManyField(blank=True, null=True, to='fitness.servicephoto'),
        ),
        migrations.AddField(
            model_name='service',
            name='subscriptions',
            field=models.ManyToManyField(blank=True, null=True, to='fitness.subscription'),
        ),
        migrations.AddField(
            model_name='service',
            name='visits',
            field=models.ManyToManyField(blank=True, null=True, through='fitness.VisitService', to='fitness.visit'),
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('date_delete', models.DateTimeField(blank=True, null=True)),
                ('permissions', models.ManyToManyField(to='fitness.permission')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fitness.service')),
            ],
        ),
        migrations.CreateModel(
            name='GroupTimetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.group')),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fitness.service'),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_phrase', models.CharField(max_length=255)),
                ('photo_path', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('mark', models.IntegerField(choices=[(1, 'Bad'), (2, 'Not Satisfactory'), (3, 'Satisfactory'), (4, 'Good'), (5, 'Excellent')])),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('date_approve', models.DateTimeField(blank=True, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fitness.client')),
                ('employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fitness.employee')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fitness.service')),
            ],
        ),
        migrations.CreateModel(
            name='Favourites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fitness.client')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fitness.service')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeTimetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.employee')),
            ],
        ),
        migrations.AddField(
            model_name='employee',
            name='roles',
            field=models.ManyToManyField(blank=True, null=True, to='fitness.role'),
        ),
        migrations.AddField(
            model_name='employee',
            name='services',
            field=models.ManyToManyField(blank=True, null=True, to='fitness.service'),
        ),
        migrations.AddField(
            model_name='discountservice',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.service'),
        ),
        migrations.CreateModel(
            name='ClientSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateTimeField(auto_now_add=True)),
                ('date_end', models.DateTimeField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.client')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fitness.group')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fitness.subscription')),
            ],
        ),
        migrations.AddField(
            model_name='client',
            name='groups',
            field=models.ManyToManyField(blank=True, null=True, to='fitness.group'),
        ),
        migrations.AddField(
            model_name='client',
            name='subscriptions',
            field=models.ManyToManyField(blank=True, null=True, through='fitness.ClientSubscription', to='fitness.subscription'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(default='unknown', max_length=128, region='RU', unique=True, verbose_name='Номер телефона')),
                ('date_of_birth', models.DateField(default=datetime.date.today, verbose_name='Дата рождения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
